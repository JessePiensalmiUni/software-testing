{
  "stats": {
    "suites": 10,
    "tests": 48,
    "passes": 31,
    "pending": 0,
    "failures": 17,
    "start": "2022-12-17T17:55:57.024Z",
    "end": "2022-12-17T17:55:57.048Z",
    "duration": 24,
    "testsRegistered": 48,
    "passPercent": 64.58333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2937f77b-2706-470d-be78-465b5da25d83",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
          "title": "CamelCase",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\camelcase.test.js",
          "file": "\\test\\camelcase.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should remove all spaces and lowercase first letter and uppercase letters after a separator",
              "fullTitle": "CamelCase Should remove all spaces and lowercase first letter and uppercase letters after a separator",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('Foo Bar')\nassert.equal(result, 'fooBar');",
              "err": {
                "message": "AssertionError: ' fooBar' == 'fooBar'",
                "estack": "AssertionError [ERR_ASSERTION]: ' fooBar' == 'fooBar'\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/camelcase.test.js:8:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "dc2a99cc-8ccc-4e24-b676-167838b53260",
              "parentUUID": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove all \"-\" signs and lowercase first letter and uppercase after a separator",
              "fullTitle": "CamelCase Should remove all \"-\" signs and lowercase first letter and uppercase after a separator",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('--foo-bar--')\nassert.equal(result, 'fooBar');",
              "err": {
                "message": "AssertionError: ' fooBar' == 'fooBar'",
                "estack": "AssertionError [ERR_ASSERTION]: ' fooBar' == 'fooBar'\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/camelcase.test.js:12:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "d30a1a9e-ffa1-451f-89e3-2f01b3c205f0",
              "parentUUID": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove all spaces and lowercase first letter and uppercase after a separator",
              "fullTitle": "CamelCase Should remove all spaces and lowercase first letter and uppercase after a separator",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('__FOO_BAR__')\nassert.equal(result, 'fooBar');",
              "err": {
                "message": "AssertionError: ' fooBar' == 'fooBar'",
                "estack": "AssertionError [ERR_ASSERTION]: ' fooBar' == 'fooBar'\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/camelcase.test.js:16:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "e2d647fb-3794-484a-82e9-a3ba41324135",
              "parentUUID": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty string",
              "fullTitle": "CamelCase Empty string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('')\nassert.equal(result, '');",
              "err": {
                "message": "AssertionError: ' ' == ''",
                "estack": "AssertionError [ERR_ASSERTION]: ' ' == ''\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/camelcase.test.js:20:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "-  \n"
              },
              "uuid": "d5115506-e6d4-49d5-9d37-7c98725daaee",
              "parentUUID": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "one word -> should start with lowercase letter",
              "fullTitle": "CamelCase one word -> should start with lowercase letter",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('Word')\nassert.equal(result, 'word');",
              "err": {
                "message": "AssertionError: ' word' == 'word'",
                "estack": "AssertionError [ERR_ASSERTION]: ' word' == 'word'\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/camelcase.test.js:24:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "-  word\n+ word\n"
              },
              "uuid": "6b0ed20e-acb7-40d8-8519-ab5a4f45847c",
              "parentUUID": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Many spaces",
              "fullTitle": "CamelCase Many spaces",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('Word   Test   one   two ----  three')\nassert.equal(result, 'wordTestOneTwoThree');",
              "err": {
                "message": "AssertionError: ' wordTestOneTwoThree' == 'wordTestOneTwoThree'",
                "estack": "AssertionError [ERR_ASSERTION]: ' wordTestOneTwoThree' == 'wordTestOneTwoThree'\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/camelcase.test.js:28:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": "-  wordTestOneTwoThree\n+ wordTestOneTwoThree\n"
              },
              "uuid": "3a4e4d67-ea4f-4b51-aa6a-a832d696ad86",
              "parentUUID": "62655390-1ff5-4881-b75f-f4f5d8c2477e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dc2a99cc-8ccc-4e24-b676-167838b53260",
            "d30a1a9e-ffa1-451f-89e3-2f01b3c205f0",
            "e2d647fb-3794-484a-82e9-a3ba41324135",
            "d5115506-e6d4-49d5-9d37-7c98725daaee",
            "6b0ed20e-acb7-40d8-8519-ab5a4f45847c",
            "3a4e4d67-ea4f-4b51-aa6a-a832d696ad86"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c064382-1a0c-46e2-8668-044a14c66285",
          "title": "castArray",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\castArray.test.js",
          "file": "\\test\\castArray.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Num 1 should be only element in array as num 1",
              "fullTitle": "castArray Num 1 should be only element in array as num 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(castArray(1), [1]);",
              "err": {},
              "uuid": "ccbf1b34-2a18-4fce-a51d-7c9447f7113f",
              "parentUUID": "8c064382-1a0c-46e2-8668-044a14c66285",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Object to array as only element",
              "fullTitle": "castArray Object to array as only element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray({ 'a': 1 })\nassert.deepEqual(result, [{ 'a': 1 }]);",
              "err": {},
              "uuid": "a5529f38-7c4b-4ac1-9c83-999c36772d21",
              "parentUUID": "8c064382-1a0c-46e2-8668-044a14c66285",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "string to array",
              "fullTitle": "castArray string to array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray('abc')\nassert.deepEqual(result, ['abc']);",
              "err": {},
              "uuid": "80edde2f-8179-4800-a3b7-fb33384b4482",
              "parentUUID": "8c064382-1a0c-46e2-8668-044a14c66285",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Null to array should work without problems",
              "fullTitle": "castArray Null to array should work without problems",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray(null)\nassert.deepEqual(result, [null]);",
              "err": {},
              "uuid": "2093ee89-4d58-4660-abc4-5b3dae33457e",
              "parentUUID": "8c064382-1a0c-46e2-8668-044a14c66285",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Undefined to array should work without problems",
              "fullTitle": "castArray Undefined to array should work without problems",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray(undefined)\nassert.deepEqual(result, [undefined]);",
              "err": {},
              "uuid": "30f216a3-b300-436a-8df9-3d4a86a6751e",
              "parentUUID": "8c064382-1a0c-46e2-8668-044a14c66285",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Array should be left as is",
              "fullTitle": "castArray Array should be left as is",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray([1, 2, 3])\nassert.deepEqual(result, [1, 2, 3]);",
              "err": {},
              "uuid": "453c4c69-fdac-4ded-b1a4-d7c1edc9ccbc",
              "parentUUID": "8c064382-1a0c-46e2-8668-044a14c66285",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccbf1b34-2a18-4fce-a51d-7c9447f7113f",
            "a5529f38-7c4b-4ac1-9c83-999c36772d21",
            "80edde2f-8179-4800-a3b7-fb33384b4482",
            "2093ee89-4d58-4660-abc4-5b3dae33457e",
            "30f216a3-b300-436a-8df9-3d4a86a6751e",
            "453c4c69-fdac-4ded-b1a4-d7c1edc9ccbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aec5ea9f-f7d2-4101-b86f-7ecaae6f5e0f",
          "title": "chunk",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\chunk.test.js",
          "file": "\\test\\chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should split array to 2 + 2 arrays when size is 2",
              "fullTitle": "chunk Should split array to 2 + 2 arrays when size is 2",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 2)\nassert.deepEqual(result, [['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  [\n    'c',\n    'd'\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b'\n  ],\n  [\n    'c',\n    'd'\n  ]\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'c',\n    'd'\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b'\n  ],\n  [\n    'c',\n    'd'\n  ]\n]\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/chunk.test.js:8:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "0198136c-e46f-4cfd-bf18-3af4c1a9c294",
              "parentUUID": "aec5ea9f-f7d2-4101-b86f-7ecaae6f5e0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should split array to 3 + 1  element arrays when size is 3",
              "fullTitle": "chunk Should split array to 3 + 1  element arrays when size is 3",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 3)\nassert.deepEqual(result, [['a', 'b', 'c'], ['d']]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd',\n    undefined,\n    undefined\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b',\n    'c'\n  ],\n  [\n    'd'\n  ]\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd',\n    undefined,\n    undefined\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b',\n    'c'\n  ],\n  [\n    'd'\n  ]\n]\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/chunk.test.js:12:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "b3b3390f-4ed7-412a-ad6c-33e440dc1d1f",
              "parentUUID": "aec5ea9f-f7d2-4101-b86f-7ecaae6f5e0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be same array inside of another array when size is  len of arr",
              "fullTitle": "chunk Should be same array inside of another array when size is  len of arr",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 4)\nassert.deepEqual(result, [['a', 'b', 'c', 'd']]);",
              "err": {},
              "uuid": "a5e28b8e-e350-45f0-a99f-6a1c7e91a50c",
              "parentUUID": "aec5ea9f-f7d2-4101-b86f-7ecaae6f5e0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be every elem in its owwn array when size is 1",
              "fullTitle": "chunk Should be every elem in its owwn array when size is 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 1)\nassert.deepEqual(result, [['a'], ['b'], ['c'], ['d']]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd'\n  ],\n  <3 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a'\n  ],\n  [\n    'b'\n  ],\n  [\n    'c'\n  ],\n  [\n    'd'\n  ]\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd'\n  ],\n  <3 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a'\n  ],\n  [\n    'b'\n  ],\n  [\n    'c'\n  ],\n  [\n    'd'\n  ]\n]\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/chunk.test.js:20:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "4617c6a7-b85e-4602-a7c4-d26fabf5e27d",
              "parentUUID": "aec5ea9f-f7d2-4101-b86f-7ecaae6f5e0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Size 0. Should propably return empty list.",
              "fullTitle": "chunk Size 0. Should propably return empty list.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 0)\nassert.deepEqual(result, []);",
              "err": {},
              "uuid": "8ab320cb-6ce0-4b41-ac29-de1a2a17247e",
              "parentUUID": "aec5ea9f-f7d2-4101-b86f-7ecaae6f5e0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5e28b8e-e350-45f0-a99f-6a1c7e91a50c",
            "8ab320cb-6ce0-4b41-ac29-de1a2a17247e"
          ],
          "failures": [
            "0198136c-e46f-4cfd-bf18-3af4c1a9c294",
            "b3b3390f-4ed7-412a-ad6c-33e440dc1d1f",
            "4617c6a7-b85e-4602-a7c4-d26fabf5e27d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e19baac5-bd10-462e-b119-6ef5a60b2f30",
          "title": "compact",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\compact.test.js",
          "file": "\\test\\compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return empty list when param is an empty list",
              "fullTitle": "compact Should return empty list when param is an empty list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([]), []);",
              "err": {},
              "uuid": "e688af60-a2bd-445e-80d4-5db27f2d7177",
              "parentUUID": "e19baac5-bd10-462e-b119-6ef5a60b2f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only truthy values in the list so should remain as is",
              "fullTitle": "compact Only truthy values in the list so should remain as is",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([1, 2, 3]), [1, 2, 3]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/compact.test.js:9:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "b7a198b4-e87f-46b2-8376-d11ee01c895b",
              "parentUUID": "e19baac5-bd10-462e-b119-6ef5a60b2f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove falsey elements",
              "fullTitle": "compact Should remove falsey elements",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([0, 1, false, 2, '', 3]), [1, 2, 3]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/compact.test.js:12:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "6be86a78-2396-4cd0-98a7-d49a26177001",
              "parentUUID": "e19baac5-bd10-462e-b119-6ef5a60b2f30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove all values from",
              "fullTitle": "compact should remove all values from",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([\"\",0,'',false]),[])",
              "err": {},
              "uuid": "9f335bda-823f-4033-9846-8930085aed4b",
              "parentUUID": "e19baac5-bd10-462e-b119-6ef5a60b2f30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e688af60-a2bd-445e-80d4-5db27f2d7177",
            "9f335bda-823f-4033-9846-8930085aed4b"
          ],
          "failures": [
            "b7a198b4-e87f-46b2-8376-d11ee01c895b",
            "6be86a78-2396-4cd0-98a7-d49a26177001"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f6f0ac9e-c286-4142-ac86-68b1507914c2",
          "title": "the countBy function",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\CountBy.test.js",
          "file": "\\test\\CountBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a map of true and false where the value for true is 1 and false is 0",
              "fullTitle": "the countBy function should return a map of true and false where the value for true is 1 and false is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(user, value => value.active),{ 'true': 1})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  true: 0\n}\n\nshould loosely deep-equal\n\n{\n  true: 1\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  true: 0\n}\n\nshould loosely deep-equal\n\n{\n  true: 1\n}\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/CountBy.test.js:27:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"true\": 0\n+   \"true\": 1\n }\n"
              },
              "uuid": "005ff338-e0ec-42ed-8391-a25f46dbeb14",
              "parentUUID": "f6f0ac9e-c286-4142-ac86-68b1507914c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of true and false where the value for true is 2 and false is 1",
              "fullTitle": "the countBy function should return a map of true and false where the value for true is 2 and false is 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(users, value => value.active),{ 'true': 2, 'false': 1 })",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  false: 0,\n  true: 1\n}\n\nshould loosely deep-equal\n\n{\n  false: 1,\n  true: 2\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  false: 0,\n  true: 1\n}\n\nshould loosely deep-equal\n\n{\n  false: 1,\n  true: 2\n}\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/CountBy.test.js:30:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "bc03be0c-44dc-4b15-8c66-82e9e4bb341c",
              "parentUUID": "f6f0ac9e-c286-4142-ac86-68b1507914c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of motorcycle, car, bike and skateboard that has values 1, 1, 1, 1",
              "fullTitle": "the countBy function should return a map of motorcycle, car, bike and skateboard that has values 1, 1, 1, 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(mobility,value => value.type),{'motorcycle':1,'car':1,'bike':1,'skateboard':1})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  bike: 0,\n  car: 0,\n  motorcycle: 0,\n  skateboard: 0\n}\n\nshould loosely deep-equal\n\n{\n  bike: 1,\n  car: 1,\n  motorcycle: 1,\n  skateboard: 1\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  bike: 0,\n  car: 0,\n  motorcycle: 0,\n  skateboard: 0\n}\n\nshould loosely deep-equal\n\n{\n  bike: 1,\n  car: 1,\n  motorcycle: 1,\n  skateboard: 1\n}\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/CountBy.test.js:33:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"bike\": 0\n-   \"car\": 0\n-   \"motorcycle\": 0\n-   \"skateboard\": 0\n+   \"bike\": 1\n+   \"car\": 1\n+   \"motorcycle\": 1\n+   \"skateboard\": 1\n }\n"
              },
              "uuid": "5504451f-897e-4a91-9a4b-4f1bd73fb6db",
              "parentUUID": "f6f0ac9e-c286-4142-ac86-68b1507914c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of undefined with a value of 4",
              "fullTitle": "the countBy function should return a map of undefined with a value of 4",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(mobility,value => value.no),{'undefined':4})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  undefined: 3\n}\n\nshould loosely deep-equal\n\n{\n  undefined: 4\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  undefined: 3\n}\n\nshould loosely deep-equal\n\n{\n  undefined: 4\n}\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/CountBy.test.js:36:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"undefined\": 3\n+   \"undefined\": 4\n }\n"
              },
              "uuid": "8aeedea0-e60c-46a6-b8d5-dd947f31f6cd",
              "parentUUID": "f6f0ac9e-c286-4142-ac86-68b1507914c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of car that has value 3",
              "fullTitle": "the countBy function should return a map of car that has value 3",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(cars,value => value.type),{'car':3})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  car: 2\n}\n\nshould loosely deep-equal\n\n{\n  car: 3\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  car: 2\n}\n\nshould loosely deep-equal\n\n{\n  car: 3\n}\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/CountBy.test.js:39:16)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": " {\n-   \"car\": 2\n+   \"car\": 3\n }\n"
              },
              "uuid": "496770d6-a863-4959-9362-060874844ebb",
              "parentUUID": "f6f0ac9e-c286-4142-ac86-68b1507914c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "005ff338-e0ec-42ed-8391-a25f46dbeb14",
            "bc03be0c-44dc-4b15-8c66-82e9e4bb341c",
            "5504451f-897e-4a91-9a4b-4f1bd73fb6db",
            "8aeedea0-e60c-46a6-b8d5-dd947f31f6cd",
            "496770d6-a863-4959-9362-060874844ebb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f872a643-6162-401c-8fb5-2b07b0aa1c97",
          "title": "the defaulToAny function",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\defaultToAny.test.js",
          "file": "\\test\\defaultToAny.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the first value when array has only non default values",
              "fullTitle": "the defaulToAny function should return the first value when array has only non default values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(1,10,20),1)",
              "err": {},
              "uuid": "f7d49626-7035-4167-b779-d1b852c3f2da",
              "parentUUID": "f872a643-6162-401c-8fb5-2b07b0aa1c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the second value when the first value of array is a default value",
              "fullTitle": "the defaulToAny function should return the second value when the first value of array is a default value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(undefined, 10, 20),10)",
              "err": {},
              "uuid": "28336959-06f2-4918-b2ff-9999bc2668d7",
              "parentUUID": "f872a643-6162-401c-8fb5-2b07b0aa1c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the third value when the first two values of array are default values",
              "fullTitle": "the defaulToAny function should return the third value when the first two values of array are default values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(undefined, null, 20),20)",
              "err": {},
              "uuid": "c84dee75-af1b-48db-b74e-8e98017423ca",
              "parentUUID": "f872a643-6162-401c-8fb5-2b07b0aa1c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last value if all values in the array are default values",
              "fullTitle": "the defaulToAny function should return the last value if all values in the array are default values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(undefined, null, NaN),NaN)",
              "err": {},
              "uuid": "035f56e3-c48a-4ac5-bc03-7259f853c278",
              "parentUUID": "f872a643-6162-401c-8fb5-2b07b0aa1c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the first value which is 1 even if there is an undefined value further back",
              "fullTitle": "the defaulToAny function should return the first value which is 1 even if there is an undefined value further back",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(1,10,undefined,20),1)",
              "err": {},
              "uuid": "928e86d3-2837-41ce-bdf0-afd38c9b86b6",
              "parentUUID": "f872a643-6162-401c-8fb5-2b07b0aa1c97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7d49626-7035-4167-b779-d1b852c3f2da",
            "28336959-06f2-4918-b2ff-9999bc2668d7",
            "c84dee75-af1b-48db-b74e-8e98017423ca",
            "035f56e3-c48a-4ac5-bc03-7259f853c278",
            "928e86d3-2837-41ce-bdf0-afd38c9b86b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "41e89486-ad22-41b2-9011-f76d155673c0",
          "title": "EveryTest",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\every.test.js",
          "file": "\\test\\every.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return false when null value in the list as its not truthy",
              "fullTitle": "EveryTest Should return false when null value in the list as its not truthy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, 1, null, 'yes'], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "95cfe17f-d05c-42eb-8b4b-616eeb10ba73",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true when empty array",
              "fullTitle": "EveryTest Should return true when empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([], Boolean)\nassert.equal(result, true);",
              "err": {},
              "uuid": "dba27d08-e406-4198-a676-00adf06ccf8f",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when false value in the array",
              "fullTitle": "EveryTest Should return false when false value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, false, true, true], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "b6d091be-8a57-4290-9b82-5e8646b2bfae",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true when only truthy values in the array",
              "fullTitle": "EveryTest Should return true when only truthy values in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, 1, true, true], Boolean)\nassert.equal(result, true);",
              "err": {},
              "uuid": "5ee94ee0-78c9-4ed1-9070-c6d653b49e65",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when only truthy falsey in the array",
              "fullTitle": "EveryTest Should return false when only truthy falsey in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([null, 0, '',], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "73ea75e6-1515-47d4-b0b8-6fa188b3b58a",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty string should count as falsey",
              "fullTitle": "EveryTest empty string should count as falsey",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([''], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "61178241-1684-4f18-92ed-ba71c0fb43a5",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "num 0 should count as falsey",
              "fullTitle": "EveryTest num 0 should count as falsey",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([0], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "01507fc4-3737-4731-8715-33b1ffae4cbc",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "0 as text should count as truthy",
              "fullTitle": "EveryTest 0 as text should count as truthy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every(['0'], Boolean)\nassert.equal(result, true);",
              "err": {},
              "uuid": "27394d0f-dbe0-4117-93ca-325fc5f4b0ab",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Text in the array should return false when predicate is a number",
              "fullTitle": "EveryTest Text in the array should return false when predicate is a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([1,'3453','dfglkhgf'], Number)\nassert.equal(result, false);",
              "err": {},
              "uuid": "b8dd1216-c295-4e8e-8fcb-504a1743b942",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Everything should return true when predicate is string",
              "fullTitle": "EveryTest Everything should return true when predicate is string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, 'two', 1, '1', false, 0], String)\nassert.equal(result, true);",
              "err": {},
              "uuid": "83c207ba-ecda-4d98-931d-b80be3dcca17",
              "parentUUID": "41e89486-ad22-41b2-9011-f76d155673c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95cfe17f-d05c-42eb-8b4b-616eeb10ba73",
            "dba27d08-e406-4198-a676-00adf06ccf8f",
            "b6d091be-8a57-4290-9b82-5e8646b2bfae",
            "5ee94ee0-78c9-4ed1-9070-c6d653b49e65",
            "73ea75e6-1515-47d4-b0b8-6fa188b3b58a",
            "61178241-1684-4f18-92ed-ba71c0fb43a5",
            "01507fc4-3737-4731-8715-33b1ffae4cbc",
            "27394d0f-dbe0-4117-93ca-325fc5f4b0ab",
            "b8dd1216-c295-4e8e-8fcb-504a1743b942",
            "83c207ba-ecda-4d98-931d-b80be3dcca17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7157bbf9-ceba-4af5-a67d-385394cb8ed9",
          "title": "the get function",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\get.test.js",
          "file": "\\test\\get.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3 which is the value of given path which is represented in string form",
              "fullTitle": "the get function should return 3 which is the value of given path which is represented in string form",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object, 'a[0].b.c'),3)",
              "err": {},
              "uuid": "62544810-e069-4417-bf5c-17fbadc8412c",
              "parentUUID": "7157bbf9-ceba-4af5-a67d-385394cb8ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3 which is the value of the given which is represented in array form",
              "fullTitle": "the get function should return 3 which is the value of the given which is represented in array form",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object, ['a', '0', 'b', 'c']),3)",
              "err": {},
              "uuid": "622b3ff1-04fb-43e6-9d05-1e020423d881",
              "parentUUID": "7157bbf9-ceba-4af5-a67d-385394cb8ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return defined which is the given defaultValue for the function",
              "fullTitle": "the get function should return defined which is the given defaultValue for the function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object2,'a[1]','default'),'default')",
              "err": {},
              "uuid": "8243276e-45b0-4c6f-b34f-b6d927014942",
              "parentUUID": "7157bbf9-ceba-4af5-a67d-385394cb8ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the default value when it cannot access a value in this case defaultValue is default",
              "fullTitle": "the get function should return the default value when it cannot access a value in this case defaultValue is default",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object3,'[0]','default'),'default')",
              "err": {},
              "uuid": "3461d5ec-f1ca-4752-9ca3-8fca198e7e57",
              "parentUUID": "7157bbf9-ceba-4af5-a67d-385394cb8ed9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62544810-e069-4417-bf5c-17fbadc8412c",
            "622b3ff1-04fb-43e6-9d05-1e020423d881",
            "8243276e-45b0-4c6f-b34f-b6d927014942",
            "3461d5ec-f1ca-4752-9ca3-8fca198e7e57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b54aa5e-c293-4c90-87bc-9aeb0d252b53",
          "title": "the memoize function",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\memoize.test.js",
          "file": "\\test\\memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an array [1,2] when given a map and and a memoized values function",
              "fullTitle": "the memoize function should return an array [1,2] when given a map and and a memoized values function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = memoize(values)\nassert.deepEqual(values(object),[1,2])",
              "err": {
                "message": "ReferenceError: Cannot access 'values' before initialization",
                "estack": "ReferenceError: Cannot access 'values' before initialization\n    at Context.<anonymous> (file:///C:/Users/609/Documents/Testing/software-testing/test/memoize.test.js:5:32)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "3087ebb7-3465-4239-83bf-a0f60fd2cf88",
              "parentUUID": "2b54aa5e-c293-4c90-87bc-9aeb0d252b53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3087ebb7-3465-4239-83bf-a0f60fd2cf88"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3f87c35e-c713-448f-9173-dfd199a83d3b",
          "title": "the reduce function",
          "fullFile": "C:\\Users\\609\\Documents\\Testing\\software-testing\\test\\reduce.test.js",
          "file": "\\test\\reduce.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3 when given an array of [1,2] and summed up",
              "fullTitle": "the reduce function should return 3 when given an array of [1,2] and summed up",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(reduce([1, 2], (sum, n) => sum + n, 0),3)",
              "err": {},
              "uuid": "034bba31-05e7-4f5c-b326-bf022f67bcfd",
              "parentUUID": "3f87c35e-c713-448f-9173-dfd199a83d3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return map with arrrays with values and keys switched",
              "fullTitle": "the reduce function should return map with arrrays with values and keys switched",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(reduce({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => {\n       (result[value] || (result[value] = [])).push(key)\n       return result\n        }, {}),{ '1': ['a', 'c'], '2': ['b'] })",
              "err": {},
              "uuid": "f418733b-db6c-429a-98f7-be7e81520e73",
              "parentUUID": "3f87c35e-c713-448f-9173-dfd199a83d3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "034bba31-05e7-4f5c-b326-bf022f67bcfd",
            "f418733b-db6c-429a-98f7-be7e81520e73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}