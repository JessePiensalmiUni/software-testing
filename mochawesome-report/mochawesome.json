{
  "stats": {
    "suites": 10,
    "tests": 56,
    "passes": 37,
    "pending": 0,
    "failures": 19,
    "start": "2022-12-18T16:19:29.916Z",
    "end": "2022-12-18T16:19:29.960Z",
    "duration": 44,
    "testsRegistered": 56,
    "passPercent": 66.07142857142857,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "184d7997-55d7-4837-8f62-d67f33316ecb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
          "title": "CamelCase",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\camelcase.test.js",
          "file": "\\test\\camelcase.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should remove all spaces and lowercase first letter and uppercase letters after a separator",
              "fullTitle": "CamelCase Should remove all spaces and lowercase first letter and uppercase letters after a separator",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('Foo Bar')\nassert.equal(result, 'fooBar');",
              "err": {
                "message": "AssertionError: ' fooBar' == 'fooBar'",
                "estack": "AssertionError [ERR_ASSERTION]: ' fooBar' == 'fooBar'\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/camelcase.test.js:8:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "bf552d1b-bcc2-4d83-88e9-44f735e70963",
              "parentUUID": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove all \"-\" signs and lowercase first letter and uppercase after a separator",
              "fullTitle": "CamelCase Should remove all \"-\" signs and lowercase first letter and uppercase after a separator",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('--foo-bar--')\nassert.equal(result, 'fooBar');",
              "err": {
                "message": "AssertionError: ' fooBar' == 'fooBar'",
                "estack": "AssertionError [ERR_ASSERTION]: ' fooBar' == 'fooBar'\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/camelcase.test.js:12:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "1eaec858-2f1b-4499-921a-c68f2bfe7c7b",
              "parentUUID": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove all spaces and lowercase first letter and uppercase after a separator",
              "fullTitle": "CamelCase Should remove all spaces and lowercase first letter and uppercase after a separator",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('__FOO_BAR__')\nassert.equal(result, 'fooBar');",
              "err": {
                "message": "AssertionError: ' fooBar' == 'fooBar'",
                "estack": "AssertionError [ERR_ASSERTION]: ' fooBar' == 'fooBar'\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/camelcase.test.js:16:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "-  fooBar\n+ fooBar\n"
              },
              "uuid": "7cd9d57d-2b9f-4252-b853-371e6aef3abe",
              "parentUUID": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty string",
              "fullTitle": "CamelCase Empty string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('')\nassert.equal(result, '');",
              "err": {
                "message": "AssertionError: ' ' == ''",
                "estack": "AssertionError [ERR_ASSERTION]: ' ' == ''\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/camelcase.test.js:20:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "-  \n"
              },
              "uuid": "ae7cc791-a629-447c-9eb3-ecbd4add218a",
              "parentUUID": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "one word -> should start with lowercase letter",
              "fullTitle": "CamelCase one word -> should start with lowercase letter",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('Word')\nassert.equal(result, 'word');",
              "err": {
                "message": "AssertionError: ' word' == 'word'",
                "estack": "AssertionError [ERR_ASSERTION]: ' word' == 'word'\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/camelcase.test.js:24:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "-  word\n+ word\n"
              },
              "uuid": "77ddaada-9dcc-41bf-a9c9-72e705b02ddb",
              "parentUUID": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Many spaces",
              "fullTitle": "CamelCase Many spaces",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var result = CamelCase('Word   Test   one   two ----  three')\nassert.equal(result, 'wordTestOneTwoThree');",
              "err": {
                "message": "AssertionError: ' wordTestOneTwoThree' == 'wordTestOneTwoThree'",
                "estack": "AssertionError [ERR_ASSERTION]: ' wordTestOneTwoThree' == 'wordTestOneTwoThree'\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/camelcase.test.js:28:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": "-  wordTestOneTwoThree\n+ wordTestOneTwoThree\n"
              },
              "uuid": "35660108-90a0-4f63-824a-347bbebd631c",
              "parentUUID": "3eb31ac7-180b-4f8e-bdcd-a290110496c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bf552d1b-bcc2-4d83-88e9-44f735e70963",
            "1eaec858-2f1b-4499-921a-c68f2bfe7c7b",
            "7cd9d57d-2b9f-4252-b853-371e6aef3abe",
            "ae7cc791-a629-447c-9eb3-ecbd4add218a",
            "77ddaada-9dcc-41bf-a9c9-72e705b02ddb",
            "35660108-90a0-4f63-824a-347bbebd631c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9623741-df74-44f4-a573-42cdc8dd25a1",
          "title": "castArray",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\castArray.test.js",
          "file": "\\test\\castArray.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Num 1 should be only element in array as num 1",
              "fullTitle": "castArray Num 1 should be only element in array as num 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(castArray(1), [1]);",
              "err": {},
              "uuid": "b3c35642-b85c-4a0e-a950-057c2f0c752c",
              "parentUUID": "c9623741-df74-44f4-a573-42cdc8dd25a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Object to array as only element",
              "fullTitle": "castArray Object to array as only element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray({ 'a': 1 })\nassert.deepEqual(result, [{ 'a': 1 }]);",
              "err": {},
              "uuid": "5bd02375-5373-46b2-856a-aaa84f053976",
              "parentUUID": "c9623741-df74-44f4-a573-42cdc8dd25a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "string to array",
              "fullTitle": "castArray string to array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray('abc')\nassert.deepEqual(result, ['abc']);",
              "err": {},
              "uuid": "c52237ca-528e-4264-a61f-5993b5a1dc1a",
              "parentUUID": "c9623741-df74-44f4-a573-42cdc8dd25a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Null to array should work without problems",
              "fullTitle": "castArray Null to array should work without problems",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray(null)\nassert.deepEqual(result, [null]);",
              "err": {},
              "uuid": "7336865e-aea4-42e2-8665-b0ea1c79c199",
              "parentUUID": "c9623741-df74-44f4-a573-42cdc8dd25a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Undefined to array should work without problems",
              "fullTitle": "castArray Undefined to array should work without problems",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray(undefined)\nassert.deepEqual(result, [undefined]);",
              "err": {},
              "uuid": "a2ec83ba-b017-46db-913f-947d2d519119",
              "parentUUID": "c9623741-df74-44f4-a573-42cdc8dd25a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Array should be left as is",
              "fullTitle": "castArray Array should be left as is",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = castArray([1, 2, 3])\nassert.deepEqual(result, [1, 2, 3]);",
              "err": {},
              "uuid": "29113ab6-1f16-4fb9-88fa-1d5750bbdf10",
              "parentUUID": "c9623741-df74-44f4-a573-42cdc8dd25a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c35642-b85c-4a0e-a950-057c2f0c752c",
            "5bd02375-5373-46b2-856a-aaa84f053976",
            "c52237ca-528e-4264-a61f-5993b5a1dc1a",
            "7336865e-aea4-42e2-8665-b0ea1c79c199",
            "a2ec83ba-b017-46db-913f-947d2d519119",
            "29113ab6-1f16-4fb9-88fa-1d5750bbdf10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ef7f81c1-7cbb-44fe-87d5-06fc11cc3cde",
          "title": "chunk",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\chunk.test.js",
          "file": "\\test\\chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should split array to 2 + 2 arrays when size is 2",
              "fullTitle": "chunk Should split array to 2 + 2 arrays when size is 2",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 2)\nassert.deepEqual(result, [['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  [\n    'c',\n    'd'\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b'\n  ],\n  [\n    'c',\n    'd'\n  ]\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'c',\n    'd'\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b'\n  ],\n  [\n    'c',\n    'd'\n  ]\n]\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/chunk.test.js:8:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "530eaf0c-75d7-42c4-80a3-301a62f2d019",
              "parentUUID": "ef7f81c1-7cbb-44fe-87d5-06fc11cc3cde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should split array to 3 + 1  element arrays when size is 3",
              "fullTitle": "chunk Should split array to 3 + 1  element arrays when size is 3",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 3)\nassert.deepEqual(result, [['a', 'b', 'c'], ['d']]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd',\n    undefined,\n    undefined\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b',\n    'c'\n  ],\n  [\n    'd'\n  ]\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd',\n    undefined,\n    undefined\n  ],\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    'b',\n    'c'\n  ],\n  [\n    'd'\n  ]\n]\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/chunk.test.js:12:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "4c700de2-6063-477a-81df-e815367d81cc",
              "parentUUID": "ef7f81c1-7cbb-44fe-87d5-06fc11cc3cde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be same array inside of another array when size is  len of arr",
              "fullTitle": "chunk Should be same array inside of another array when size is  len of arr",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 4)\nassert.deepEqual(result, [['a', 'b', 'c', 'd']]);",
              "err": {},
              "uuid": "eb6370e3-d76b-40c1-92ac-9096e39b42ec",
              "parentUUID": "ef7f81c1-7cbb-44fe-87d5-06fc11cc3cde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be every elem in its owwn array when size is 1",
              "fullTitle": "chunk Should be every elem in its owwn array when size is 1",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 1)\nassert.deepEqual(result, [['a'], ['b'], ['c'], ['d']]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd'\n  ],\n  <3 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a'\n  ],\n  [\n    'b'\n  ],\n  [\n    'c'\n  ],\n  [\n    'd'\n  ]\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'd'\n  ],\n  <3 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a'\n  ],\n  [\n    'b'\n  ],\n  [\n    'c'\n  ],\n  [\n    'd'\n  ]\n]\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/chunk.test.js:20:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "bf199f2f-f587-4363-8255-4c0564bb61ca",
              "parentUUID": "ef7f81c1-7cbb-44fe-87d5-06fc11cc3cde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Size 0. Should propably return empty list.",
              "fullTitle": "chunk Size 0. Should propably return empty list.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = chunk(['a', 'b', 'c', 'd'], 0)\nassert.deepEqual(result, []);",
              "err": {},
              "uuid": "ec493d25-6e54-4de6-85fd-34eb2e78b834",
              "parentUUID": "ef7f81c1-7cbb-44fe-87d5-06fc11cc3cde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb6370e3-d76b-40c1-92ac-9096e39b42ec",
            "ec493d25-6e54-4de6-85fd-34eb2e78b834"
          ],
          "failures": [
            "530eaf0c-75d7-42c4-80a3-301a62f2d019",
            "4c700de2-6063-477a-81df-e815367d81cc",
            "bf199f2f-f587-4363-8255-4c0564bb61ca"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eacb93d7-62d4-46e4-8823-a983b9077a6d",
          "title": "compact",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\compact.test.js",
          "file": "\\test\\compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return empty list when param is an empty list",
              "fullTitle": "compact Should return empty list when param is an empty list",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([]), []);",
              "err": {},
              "uuid": "ce5b3ade-619d-4c7a-ae55-f1a2ee71c6cd",
              "parentUUID": "eacb93d7-62d4-46e4-8823-a983b9077a6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only truthy values in the list so should remain as is",
              "fullTitle": "compact Only truthy values in the list so should remain as is",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([1, 2, 3]), [1, 2, 3]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/compact.test.js:9:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "b5c91461-5f3d-446a-b305-642d6ae95c56",
              "parentUUID": "eacb93d7-62d4-46e4-8823-a983b9077a6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove falsey elements",
              "fullTitle": "compact Should remove falsey elements",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([0, 1, false, 2, '', 3]), [1, 2, 3]);",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/compact.test.js:12:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "f98c17b0-e840-4786-a2ea-3686c437503f",
              "parentUUID": "eacb93d7-62d4-46e4-8823-a983b9077a6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove all values from",
              "fullTitle": "compact should remove all values from",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(compact([\"\",0,'',false]),[])",
              "err": {},
              "uuid": "9053fae0-ccb5-49b6-b746-f9e76f265230",
              "parentUUID": "eacb93d7-62d4-46e4-8823-a983b9077a6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce5b3ade-619d-4c7a-ae55-f1a2ee71c6cd",
            "9053fae0-ccb5-49b6-b746-f9e76f265230"
          ],
          "failures": [
            "b5c91461-5f3d-446a-b305-642d6ae95c56",
            "f98c17b0-e840-4786-a2ea-3686c437503f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
          "title": "the countBy function",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\CountBy.test.js",
          "file": "\\test\\CountBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a map of true and false where the value for true is 1 and false is 0",
              "fullTitle": "the countBy function should return a map of true and false where the value for true is 1 and false is 0",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(user, value => value.active),{ 'true': 1})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  true: 0\n}\n\nshould loosely deep-equal\n\n{\n  true: 1\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  true: 0\n}\n\nshould loosely deep-equal\n\n{\n  true: 1\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:39:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"true\": 0\n+   \"true\": 1\n }\n"
              },
              "uuid": "27480295-309f-43d6-aa46-93ba3a40d307",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of true and false where the value for true is 2 and false is 1",
              "fullTitle": "the countBy function should return a map of true and false where the value for true is 2 and false is 1",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(users, value => value.active),{ 'true': 2, 'false': 1 })",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  false: 0,\n  true: 1\n}\n\nshould loosely deep-equal\n\n{\n  false: 1,\n  true: 2\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  false: 0,\n  true: 1\n}\n\nshould loosely deep-equal\n\n{\n  false: 1,\n  true: 2\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:42:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "bfce7597-92d9-4cc4-9376-abbe3043715d",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of motorcycle, car, bike and skateboard that has values 1, 1, 1, 1",
              "fullTitle": "the countBy function should return a map of motorcycle, car, bike and skateboard that has values 1, 1, 1, 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(mobility,value => value.type),{'motorcycle':1,'car':1,'bike':1,'skateboard':1})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  bike: 0,\n  car: 0,\n  motorcycle: 0,\n  skateboard: 0\n}\n\nshould loosely deep-equal\n\n{\n  bike: 1,\n  car: 1,\n  motorcycle: 1,\n  skateboard: 1\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  bike: 0,\n  car: 0,\n  motorcycle: 0,\n  skateboard: 0\n}\n\nshould loosely deep-equal\n\n{\n  bike: 1,\n  car: 1,\n  motorcycle: 1,\n  skateboard: 1\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:45:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"bike\": 0\n-   \"car\": 0\n-   \"motorcycle\": 0\n-   \"skateboard\": 0\n+   \"bike\": 1\n+   \"car\": 1\n+   \"motorcycle\": 1\n+   \"skateboard\": 1\n }\n"
              },
              "uuid": "389331f2-dfd6-4c00-a89e-d3b976c85d64",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of undefined with a value of 4",
              "fullTitle": "the countBy function should return a map of undefined with a value of 4",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(mobility,value => value.no),{'undefined':4})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  undefined: 3\n}\n\nshould loosely deep-equal\n\n{\n  undefined: 4\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  undefined: 3\n}\n\nshould loosely deep-equal\n\n{\n  undefined: 4\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:48:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"undefined\": 3\n+   \"undefined\": 4\n }\n"
              },
              "uuid": "737cae46-0c03-4a8b-bd78-4543100001e8",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of car that has value 3",
              "fullTitle": "the countBy function should return a map of car that has value 3",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(cars,value => value.type),{'car':3})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  car: 2\n}\n\nshould loosely deep-equal\n\n{\n  car: 3\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  car: 2\n}\n\nshould loosely deep-equal\n\n{\n  car: 3\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:51:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"car\": 2\n+   \"car\": 3\n }\n"
              },
              "uuid": "e5fe56cd-7404-4b31-bf76-b2955dabdfac",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of the that has value 1",
              "fullTitle": "the countBy function should return a map of the that has value 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(weird,value => value.what),{'the':1})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  no: 0,\n  the: 0,\n  undefined: 0\n}\n\nshould loosely deep-equal\n\n{\n  the: 1\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  no: 0,\n  the: 0,\n  undefined: 0\n}\n\nshould loosely deep-equal\n\n{\n  the: 1\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:54:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"no\": 0\n-   \"the\": 0\n-   \"undefined\": 0\n+   \"the\": 1\n }\n"
              },
              "uuid": "2df94ba1-ac8f-4b5f-a524-09969d40ec1f",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of {undefined:1,null:1,0:1} that have value 1",
              "fullTitle": "the countBy function should return a map of {undefined:1,null:1,0:1} that have value 1",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(weird,value => value.type),{undefined:1,null:1,0:1})",
              "err": {
                "message": "AssertionError: Expected values to be loosely deep-equal:\n\n{\n  '0': 0,\n  null: 0,\n  undefined: 0\n}\n\nshould loosely deep-equal\n\n{\n  '0': 1,\n  null: 1,\n  undefined: 1\n}",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '0': 0,\n  null: 0,\n  undefined: 0\n}\n\nshould loosely deep-equal\n\n{\n  '0': 1,\n  null: 1,\n  undefined: 1\n}\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/CountBy.test.js:57:16)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": " {\n-   \"0\": 0\n-   \"null\": 0\n-   \"undefined\": 0\n+   \"0\": 1\n+   \"null\": 1\n+   \"undefined\": 1\n }\n"
              },
              "uuid": "4c58d1e0-79f5-4fc1-9fad-629aa916f247",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a map of {undefined:0,0:0} that have value 1",
              "fullTitle": "the countBy function should return a map of {undefined:0,0:0} that have value 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(zero,value => value.undefined),{undefined:0,0:0})",
              "err": {},
              "uuid": "8f17f03e-9bcd-4506-a660-c2d0e2724133",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return {} when given an empty array and a value that doesn't exist in the variable",
              "fullTitle": "the countBy function should return {} when given an empty array and a value that doesn't exist in the variable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(countBy(empty,value => value.type),{})",
              "err": {},
              "uuid": "e32dd0a5-ee45-4c63-a78a-44f655ee6e86",
              "parentUUID": "1d480911-a2cd-4ddb-a08b-c78d40c731a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f17f03e-9bcd-4506-a660-c2d0e2724133",
            "e32dd0a5-ee45-4c63-a78a-44f655ee6e86"
          ],
          "failures": [
            "27480295-309f-43d6-aa46-93ba3a40d307",
            "bfce7597-92d9-4cc4-9376-abbe3043715d",
            "389331f2-dfd6-4c00-a89e-d3b976c85d64",
            "737cae46-0c03-4a8b-bd78-4543100001e8",
            "e5fe56cd-7404-4b31-bf76-b2955dabdfac",
            "2df94ba1-ac8f-4b5f-a524-09969d40ec1f",
            "4c58d1e0-79f5-4fc1-9fad-629aa916f247"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9ff1b66b-3f4d-448c-9c68-d58f2e78472f",
          "title": "the defaulToAny function",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\defaultToAny.test.js",
          "file": "\\test\\defaultToAny.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the first value when array has only non default values",
              "fullTitle": "the defaulToAny function should return the first value when array has only non default values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(1,10,20),1)",
              "err": {},
              "uuid": "4cf840de-14f8-4d51-92ec-751d62b692c3",
              "parentUUID": "9ff1b66b-3f4d-448c-9c68-d58f2e78472f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the second value when the first value of array is a default value",
              "fullTitle": "the defaulToAny function should return the second value when the first value of array is a default value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(undefined, 10, 20),10)",
              "err": {},
              "uuid": "7d9a40b6-c2a8-4a90-a320-406ca589d1f8",
              "parentUUID": "9ff1b66b-3f4d-448c-9c68-d58f2e78472f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the third value when the first two values of array are default values",
              "fullTitle": "the defaulToAny function should return the third value when the first two values of array are default values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(undefined, null, 20),20)",
              "err": {},
              "uuid": "66747874-f646-4bc3-9e6e-2cfd56d5ef4c",
              "parentUUID": "9ff1b66b-3f4d-448c-9c68-d58f2e78472f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last value if all values in the array are default values",
              "fullTitle": "the defaulToAny function should return the last value if all values in the array are default values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(undefined, null, NaN),NaN)",
              "err": {},
              "uuid": "53584b0e-508e-444a-b564-bd23dcb303fb",
              "parentUUID": "9ff1b66b-3f4d-448c-9c68-d58f2e78472f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the first value which is 1 even if there is an undefined value further back",
              "fullTitle": "the defaulToAny function should return the first value which is 1 even if there is an undefined value further back",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(defaulToAny(1,10,undefined,20),1)",
              "err": {},
              "uuid": "0aeb798b-a73b-46b2-9bcf-35526cd43388",
              "parentUUID": "9ff1b66b-3f4d-448c-9c68-d58f2e78472f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4cf840de-14f8-4d51-92ec-751d62b692c3",
            "7d9a40b6-c2a8-4a90-a320-406ca589d1f8",
            "66747874-f646-4bc3-9e6e-2cfd56d5ef4c",
            "53584b0e-508e-444a-b564-bd23dcb303fb",
            "0aeb798b-a73b-46b2-9bcf-35526cd43388"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
          "title": "EveryTest",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\every.test.js",
          "file": "\\test\\every.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return false when null value in the list as its not truthy",
              "fullTitle": "EveryTest Should return false when null value in the list as its not truthy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, 1, null, 'yes'], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "85dc56a7-17a6-455e-aa2c-66feb2708f3f",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true when empty array",
              "fullTitle": "EveryTest Should return true when empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([], Boolean)\nassert.equal(result, true);",
              "err": {},
              "uuid": "62d34e14-436e-4053-a15e-c2438ef2f632",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when false value in the array",
              "fullTitle": "EveryTest Should return false when false value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, false, true, true], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "84a0c82d-6679-4c0d-95f6-9783ff1c2319",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return true when only truthy values in the array",
              "fullTitle": "EveryTest Should return true when only truthy values in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, 1, true, true], Boolean)\nassert.equal(result, true);",
              "err": {},
              "uuid": "edf5b8b6-d8ac-4519-853d-c3c589fa7381",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return false when only truthy falsey in the array",
              "fullTitle": "EveryTest Should return false when only truthy falsey in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([null, 0, '',], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "3683f172-af38-460a-b0f2-f51421a26bcc",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty string should count as falsey",
              "fullTitle": "EveryTest empty string should count as falsey",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([''], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "12152eea-51ad-4456-9e76-79a3df787544",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "num 0 should count as falsey",
              "fullTitle": "EveryTest num 0 should count as falsey",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([0], Boolean)\nassert.equal(result, false);",
              "err": {},
              "uuid": "f0be3ccb-a755-4e3b-8524-7e7d65238d8e",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "0 as text should count as truthy",
              "fullTitle": "EveryTest 0 as text should count as truthy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every(['0'], Boolean)\nassert.equal(result, true);",
              "err": {},
              "uuid": "126b0192-cce2-4bc2-ade5-a5bdde5d765d",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Text in the array should return false when predicate is a number",
              "fullTitle": "EveryTest Text in the array should return false when predicate is a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([1,'3453','dfglkhgf'], Number)\nassert.equal(result, false);",
              "err": {},
              "uuid": "8d34f0cb-eb9d-4caf-ba3c-25b305b68242",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Everything should return true when predicate is string",
              "fullTitle": "EveryTest Everything should return true when predicate is string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var result = every([true, 'two', 1, '1', false, 0], String)\nassert.equal(result, true);",
              "err": {},
              "uuid": "c252b37d-38b9-46a6-883b-ad3ef22d1efb",
              "parentUUID": "c93417e1-7f65-49cf-b321-86e60a8aae2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85dc56a7-17a6-455e-aa2c-66feb2708f3f",
            "62d34e14-436e-4053-a15e-c2438ef2f632",
            "84a0c82d-6679-4c0d-95f6-9783ff1c2319",
            "edf5b8b6-d8ac-4519-853d-c3c589fa7381",
            "3683f172-af38-460a-b0f2-f51421a26bcc",
            "12152eea-51ad-4456-9e76-79a3df787544",
            "f0be3ccb-a755-4e3b-8524-7e7d65238d8e",
            "126b0192-cce2-4bc2-ade5-a5bdde5d765d",
            "8d34f0cb-eb9d-4caf-ba3c-25b305b68242",
            "c252b37d-38b9-46a6-883b-ad3ef22d1efb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "567dec75-dfa3-4fbf-8043-9e74fc75cafd",
          "title": "the get function",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\get.test.js",
          "file": "\\test\\get.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3 which is the value of given path which is represented in string form",
              "fullTitle": "the get function should return 3 which is the value of given path which is represented in string form",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object, 'a[0].b.c'),3)",
              "err": {},
              "uuid": "90f14579-d574-42ba-80c8-aacf1486fda8",
              "parentUUID": "567dec75-dfa3-4fbf-8043-9e74fc75cafd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3 which is the value of the given which is represented in array form",
              "fullTitle": "the get function should return 3 which is the value of the given which is represented in array form",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object, ['a', '0', 'b', 'c']),3)",
              "err": {},
              "uuid": "c0c9b23f-a055-406e-af8b-fd093e4f85d9",
              "parentUUID": "567dec75-dfa3-4fbf-8043-9e74fc75cafd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3 which is the value of the given which is represented in array form even when given a defaultValue parameter",
              "fullTitle": "the get function should return 3 which is the value of the given which is represented in array form even when given a defaultValue parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object, ['a', '0', 'b', 'c'],'default'),3)",
              "err": {},
              "uuid": "ad30331c-b852-4af3-be17-1b64007cdc51",
              "parentUUID": "567dec75-dfa3-4fbf-8043-9e74fc75cafd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return defined which is the given defaultValue for the function",
              "fullTitle": "the get function should return defined which is the given defaultValue for the function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object2,'a[1]','default'),'default')",
              "err": {},
              "uuid": "2739d192-552c-4255-9c5b-0eecbf00b066",
              "parentUUID": "567dec75-dfa3-4fbf-8043-9e74fc75cafd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the default value when it cannot access a value in this case defaultValue is default",
              "fullTitle": "the get function should return the default value when it cannot access a value in this case defaultValue is default",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(get(object3,'\"a\"','default'),'default')",
              "err": {},
              "uuid": "221025bd-fa58-4e50-a896-7f7a99492c46",
              "parentUUID": "567dec75-dfa3-4fbf-8043-9e74fc75cafd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90f14579-d574-42ba-80c8-aacf1486fda8",
            "c0c9b23f-a055-406e-af8b-fd093e4f85d9",
            "ad30331c-b852-4af3-be17-1b64007cdc51",
            "2739d192-552c-4255-9c5b-0eecbf00b066",
            "221025bd-fa58-4e50-a896-7f7a99492c46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0fca153-8a15-4911-a152-18ce36f36ec8",
          "title": "the memoize function",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\memoize.test.js",
          "file": "\\test\\memoize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return an array [1,2] when given a map and and a memoized values function",
              "fullTitle": "the memoize function should return an array [1,2] when given a map and and a memoized values function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = memoize(values)\nassert.deepEqual(values(object),[1,2])",
              "err": {
                "message": "ReferenceError: Cannot access 'values' before initialization",
                "estack": "ReferenceError: Cannot access 'values' before initialization\n    at Context.<anonymous> (file:///F:/Software_testing_course/software-testing/test/memoize.test.js:5:32)\n    at processImmediate (node:internal/timers:466:21)",
                "diff": null
              },
              "uuid": "e4e27482-2c43-4c7c-a46c-bfaf3fdc41ac",
              "parentUUID": "f0fca153-8a15-4911-a152-18ce36f36ec8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e4e27482-2c43-4c7c-a46c-bfaf3fdc41ac"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d75e9a4c-5a45-4f25-b1d4-d389f0590a15",
          "title": "the reduce function",
          "fullFile": "F:\\Software_testing_course\\software-testing\\test\\reduce.test.js",
          "file": "\\test\\reduce.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 3 when given an array of [1,2] and summed up",
              "fullTitle": "the reduce function should return 3 when given an array of [1,2] and summed up",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(reduce([1, 2], (sum, n) => sum + n, 0),3)",
              "err": {},
              "uuid": "fe7ddd5b-be2a-467c-8bc0-ba752d98a66b",
              "parentUUID": "d75e9a4c-5a45-4f25-b1d4-d389f0590a15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3 when given an array of [1,2] and summed up even when start value parameter is not provided",
              "fullTitle": "the reduce function should return 3 when given an array of [1,2] and summed up even when start value parameter is not provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(reduce([1, 2], (sum, n) => sum + n),3)",
              "err": {},
              "uuid": "c95fe893-1e0a-41af-aa17-a1a7a9163df2",
              "parentUUID": "d75e9a4c-5a45-4f25-b1d4-d389f0590a15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 3 when given an array of [1,2] and summed up even when start value parameter is not provided",
              "fullTitle": "the reduce function should return 3 when given an array of [1,2] and summed up even when start value parameter is not provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(reduce([1, 2,4,-1,null], (sum, n) => sum + n),6)",
              "err": {},
              "uuid": "601f85c4-2162-434f-bb58-ef30e485e05a",
              "parentUUID": "d75e9a4c-5a45-4f25-b1d4-d389f0590a15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return map with arrrays with values and keys switched",
              "fullTitle": "the reduce function should return map with arrrays with values and keys switched",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(reduce({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => {\n       (result[value] || (result[value] = [])).push(key)\n       return result\n        }, {}),{ '1': ['a', 'c'], '2': ['b'] })",
              "err": {},
              "uuid": "dbf13d73-580a-44a9-a7b5-bab939d5ca34",
              "parentUUID": "d75e9a4c-5a45-4f25-b1d4-d389f0590a15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the sum of values of the map",
              "fullTitle": "the reduce function should return the sum of values of the map",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.deepEqual(reduce({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => result+value, 0),4)",
              "err": {},
              "uuid": "c63d7b80-6aeb-43f8-882e-e2af989adacf",
              "parentUUID": "d75e9a4c-5a45-4f25-b1d4-d389f0590a15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe7ddd5b-be2a-467c-8bc0-ba752d98a66b",
            "c95fe893-1e0a-41af-aa17-a1a7a9163df2",
            "601f85c4-2162-434f-bb58-ef30e485e05a",
            "dbf13d73-580a-44a9-a7b5-bab939d5ca34",
            "c63d7b80-6aeb-43f8-882e-e2af989adacf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}